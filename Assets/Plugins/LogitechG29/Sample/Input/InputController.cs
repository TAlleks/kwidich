//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Plugins/LogitechG29/Sample/Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Plugins/LogitechG29/Sample/Input/InputController.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputController: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Buttons"",
            ""id"": ""366fc144-7b11-4055-81f7-aeb29843cad1"",
            ""actions"": [
                {
                    ""name"": ""Dpad"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c28dad5a-4545-4f5a-b7a6-67d4ca0a9d46"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Home"",
                    ""type"": ""PassThrough"",
                    ""id"": ""64b446df-975a-4e02-94b6-f3776a4dac41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""East"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1c3e07a3-7101-4608-a1c4-74cb5d7027df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Bumper"",
                    ""type"": ""PassThrough"",
                    ""id"": ""af28ae4b-4cd6-4f43-a86d-1045ba710102"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Bumper"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fde1c166-6999-4625-a3d0-9db2c5374f59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Shift"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c11f392f-8942-4ad1-8dee-e16a2470a4a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Shift"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b59f17e9-8ff8-4fe6-8395-1e38af3b6cd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Stick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0248e9b9-1dfb-4bbd-a879-91020040238c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Stick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2bc9ae33-7048-4dd8-b65a-e02397f765f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Turn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""34e0ed7c-b41f-4de2-ba12-fc3fb0b76467"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Turn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5fca0010-b7c0-45fa-af32-9a3bcffb9945"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Minus"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9f4b7cce-07f1-4d71-8ce4-0a11f6770251"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""North"",
                    ""type"": ""PassThrough"",
                    ""id"": ""056ae5b5-d61a-4d50-bbb1-ee3246589ac7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""PassThrough"",
                    ""id"": ""afdb6d6f-eff7-4aa2-a3f1-3136a0bd7642"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Plus"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7ec90107-83c6-4be4-8be1-6760334b32f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5cb9e380-49e2-4872-afcc-bfc7827ff1df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Share"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7d00e2e0-b565-4b65-83e6-caf7145a3daf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""South"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e4892a76-937c-4ba9-b09d-80d75a3fa065"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""West"",
                    ""type"": ""PassThrough"",
                    ""id"": ""18b2c3bb-1c41-4fb4-991c-e1ed97dc5610"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""285f676c-cc2c-4ec3-bbee-aa5db607c2ea"",
                    ""path"": ""<Logitech G29 Racing Wheel>/hatSwitch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Dpad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7b0a020-1a75-4373-8723-79b16e1ad518"",
                    ""path"": ""<Logitech G29 Racing Wheel>/homeButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Home"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f74b8af-bd28-4269-918f-f7ad9a14eb8d"",
                    ""path"": ""<Logitech G29 Racing Wheel>/eastButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""East"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb568b1f-28d1-48d6-8649-ece22a69b163"",
                    ""path"": ""<Logitech G29 Racing Wheel>/leftBumperButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Left Bumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fcd4a03-0374-4139-85ff-3f8a7c68824b"",
                    ""path"": ""<Logitech G29 Racing Wheel>/leftShiftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Left Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40147922-a6e1-4a95-8089-3d3a774617f1"",
                    ""path"": ""<Logitech G29 Racing Wheel>/leftStickButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Left Stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""364d1fd5-935c-4528-ad7f-9bf11f3d388d"",
                    ""path"": ""<Logitech G29 Racing Wheel>/leftTurnButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Left Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae86d439-6302-4779-8ca5-8566cebbcc36"",
                    ""path"": ""<Logitech G29 Racing Wheel>/rightTurnButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Right Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55279cb7-43d3-439f-bf0d-75793f70ace6"",
                    ""path"": ""<Logitech G29 Racing Wheel>/rightBumperButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Right Bumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf8c79ef-8c04-4567-8a69-3d3a772aa783"",
                    ""path"": ""<Logitech G29 Racing Wheel>/rightStickButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Right Stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9071e17d-326b-45ac-9e1b-8863dbdf5280"",
                    ""path"": ""<Logitech G29 Racing Wheel>/minusButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Minus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d5a828f-69ce-4b5f-b709-9e55e285ed68"",
                    ""path"": ""<Logitech G29 Racing Wheel>/northButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""North"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f038c92b-7e17-4452-820d-a8d70dd33f3b"",
                    ""path"": ""<Logitech G29 Racing Wheel>/optionsButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffd245f9-9f5b-487f-bcd2-4750691ac8e0"",
                    ""path"": ""<Logitech G29 Racing Wheel>/plusButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Plus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23c9878f-b692-4bcf-8aa9-42db802520df"",
                    ""path"": ""<Logitech G29 Racing Wheel>/returnButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0019497a-245c-4a97-a0b2-706ddefbac1e"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shareButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Share"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07da0fcb-9095-4a0a-8e09-b27deb9bb4cb"",
                    ""path"": ""<Logitech G29 Racing Wheel>/southButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""South"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e860e19-b41d-47ca-b76a-ee1bdb42bc69"",
                    ""path"": ""<Logitech G29 Racing Wheel>/westButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""West"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""184eac69-20fc-4e1f-8089-25117bb1859e"",
                    ""path"": ""<Logitech G29 Racing Wheel>/rightShiftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Right Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Steering wheel"",
            ""id"": ""89471281-14ca-4c02-9469-39482cff8fe7"",
            ""actions"": [
                {
                    ""name"": ""Steering_Steering"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c210cc6b-6dbf-4750-96f7-d6391fd4e5c8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steering_Stick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5fd1879f-58f5-4404-8213-d69947add039"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b92063b8-3ec8-4d39-85d1-d38b9fd92004"",
                    ""path"": ""<Logitech G29 Racing Wheel>/Steering"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Steering_Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8fcf12e-ef1c-4c67-a48f-4aecbc425dd8"",
                    ""path"": ""<Logitech G29 Racing Wheel>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Steering_Stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pedals"",
            ""id"": ""aaf7a826-6625-44cf-b9df-3a5b6ac04bf1"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d6d9a278-00f3-4985-9413-408b55a3f3f6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clutch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""72009cd4-f547-4845-bc9b-7a54c33e051a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d85a4b36-5ae2-4b5d-8caa-f1a5dcbca282"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""138d1530-b475-4da5-a752-a680c2b874ef"",
                    ""path"": ""<Logitech G29 Racing Wheel>/throttleAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23c462a6-d9b2-4140-ae65-03d64daa6a0d"",
                    ""path"": ""<Logitech G29 Racing Wheel>/clutchAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a00d829-94e4-42aa-87e2-fef9c1a28a2f"",
                    ""path"": ""<Logitech G29 Racing Wheel>/brakeAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Transmission"",
            ""id"": ""4066e94a-157f-4f51-a458-518a190216c0"",
            ""actions"": [
                {
                    ""name"": ""Shifter 1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d718378e-51bc-4d70-9291-4b216fbf18da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifter 2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7b4681f-ae5f-49e0-8c54-3e2b312716a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifter 3"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ce1a9fe4-8885-428a-938e-c94692ffa420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifter 4"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f3de7074-35e3-4585-a9bd-07607cf38d39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifter 5"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9a595845-1a10-4cc9-a7b0-6f67be862548"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifter 6"",
                    ""type"": ""PassThrough"",
                    ""id"": ""940045f6-a587-4e9b-b99a-ffceaa60eeb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifter 7"",
                    ""type"": ""PassThrough"",
                    ""id"": ""05a540fb-c032-40e5-a9da-09a8ef28c029"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ee13dbb-68c2-4078-bc0c-c2edbb607344"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b48abf65-1b78-4e94-99ac-b84eca9b868e"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8eb4f026-a740-471e-8cf3-4bb99420b0a7"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03390530-4184-4bc1-a2bf-6a17fa00f649"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b50223d5-9011-4297-b37b-69b181ac9a36"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99023c05-692a-47c8-bd75-fe699ff6997f"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f95bf68-a3ca-4a1d-ba8a-6438368e3812"",
                    ""path"": ""<Logitech G29 Racing Wheel>/shifter7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Logitech G29"",
                    ""action"": ""Shifter 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Handbrake"",
            ""id"": ""c0bf132c-2b6e-4479-9632-d098ec0fa04f"",
            ""actions"": [
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9dc519ac-1b13-406a-b03a-0a0624a71978"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e0501f1-5b0e-43d6-9fbd-35f5addc0cb8"",
                    ""path"": ""<HID::wch.cn Hand Brake>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Logitech G29"",
            ""bindingGroup"": ""Logitech G29"",
            ""devices"": [
                {
                    ""devicePath"": ""<Logitech G29 Racing Wheel>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Buttons
        m_Buttons = asset.FindActionMap("Buttons", throwIfNotFound: true);
        m_Buttons_Dpad = m_Buttons.FindAction("Dpad", throwIfNotFound: true);
        m_Buttons_Home = m_Buttons.FindAction("Home", throwIfNotFound: true);
        m_Buttons_East = m_Buttons.FindAction("East", throwIfNotFound: true);
        m_Buttons_LeftBumper = m_Buttons.FindAction("Left Bumper", throwIfNotFound: true);
        m_Buttons_RightBumper = m_Buttons.FindAction("Right Bumper", throwIfNotFound: true);
        m_Buttons_LeftShift = m_Buttons.FindAction("Left Shift", throwIfNotFound: true);
        m_Buttons_RightShift = m_Buttons.FindAction("Right Shift", throwIfNotFound: true);
        m_Buttons_RightStick = m_Buttons.FindAction("Right Stick", throwIfNotFound: true);
        m_Buttons_LeftStick = m_Buttons.FindAction("Left Stick", throwIfNotFound: true);
        m_Buttons_LeftTurn = m_Buttons.FindAction("Left Turn", throwIfNotFound: true);
        m_Buttons_RightTurn = m_Buttons.FindAction("Right Turn", throwIfNotFound: true);
        m_Buttons_Minus = m_Buttons.FindAction("Minus", throwIfNotFound: true);
        m_Buttons_North = m_Buttons.FindAction("North", throwIfNotFound: true);
        m_Buttons_Options = m_Buttons.FindAction("Options", throwIfNotFound: true);
        m_Buttons_Plus = m_Buttons.FindAction("Plus", throwIfNotFound: true);
        m_Buttons_Return = m_Buttons.FindAction("Return", throwIfNotFound: true);
        m_Buttons_Share = m_Buttons.FindAction("Share", throwIfNotFound: true);
        m_Buttons_South = m_Buttons.FindAction("South", throwIfNotFound: true);
        m_Buttons_West = m_Buttons.FindAction("West", throwIfNotFound: true);
        // Steering wheel
        m_Steeringwheel = asset.FindActionMap("Steering wheel", throwIfNotFound: true);
        m_Steeringwheel_Steering_Steering = m_Steeringwheel.FindAction("Steering_Steering", throwIfNotFound: true);
        m_Steeringwheel_Steering_Stick = m_Steeringwheel.FindAction("Steering_Stick", throwIfNotFound: true);
        // Pedals
        m_Pedals = asset.FindActionMap("Pedals", throwIfNotFound: true);
        m_Pedals_Throttle = m_Pedals.FindAction("Throttle", throwIfNotFound: true);
        m_Pedals_Clutch = m_Pedals.FindAction("Clutch", throwIfNotFound: true);
        m_Pedals_Brake = m_Pedals.FindAction("Brake", throwIfNotFound: true);
        // Transmission
        m_Transmission = asset.FindActionMap("Transmission", throwIfNotFound: true);
        m_Transmission_Shifter1 = m_Transmission.FindAction("Shifter 1", throwIfNotFound: true);
        m_Transmission_Shifter2 = m_Transmission.FindAction("Shifter 2", throwIfNotFound: true);
        m_Transmission_Shifter3 = m_Transmission.FindAction("Shifter 3", throwIfNotFound: true);
        m_Transmission_Shifter4 = m_Transmission.FindAction("Shifter 4", throwIfNotFound: true);
        m_Transmission_Shifter5 = m_Transmission.FindAction("Shifter 5", throwIfNotFound: true);
        m_Transmission_Shifter6 = m_Transmission.FindAction("Shifter 6", throwIfNotFound: true);
        m_Transmission_Shifter7 = m_Transmission.FindAction("Shifter 7", throwIfNotFound: true);
        // Handbrake
        m_Handbrake = asset.FindActionMap("Handbrake", throwIfNotFound: true);
        m_Handbrake_Handbrake = m_Handbrake.FindAction("Handbrake", throwIfNotFound: true);
    }

    ~@InputController()
    {
        UnityEngine.Debug.Assert(!m_Buttons.enabled, "This will cause a leak and performance issues, InputController.Buttons.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Steeringwheel.enabled, "This will cause a leak and performance issues, InputController.Steeringwheel.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Pedals.enabled, "This will cause a leak and performance issues, InputController.Pedals.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Transmission.enabled, "This will cause a leak and performance issues, InputController.Transmission.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Handbrake.enabled, "This will cause a leak and performance issues, InputController.Handbrake.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Buttons
    private readonly InputActionMap m_Buttons;
    private List<IButtonsActions> m_ButtonsActionsCallbackInterfaces = new List<IButtonsActions>();
    private readonly InputAction m_Buttons_Dpad;
    private readonly InputAction m_Buttons_Home;
    private readonly InputAction m_Buttons_East;
    private readonly InputAction m_Buttons_LeftBumper;
    private readonly InputAction m_Buttons_RightBumper;
    private readonly InputAction m_Buttons_LeftShift;
    private readonly InputAction m_Buttons_RightShift;
    private readonly InputAction m_Buttons_RightStick;
    private readonly InputAction m_Buttons_LeftStick;
    private readonly InputAction m_Buttons_LeftTurn;
    private readonly InputAction m_Buttons_RightTurn;
    private readonly InputAction m_Buttons_Minus;
    private readonly InputAction m_Buttons_North;
    private readonly InputAction m_Buttons_Options;
    private readonly InputAction m_Buttons_Plus;
    private readonly InputAction m_Buttons_Return;
    private readonly InputAction m_Buttons_Share;
    private readonly InputAction m_Buttons_South;
    private readonly InputAction m_Buttons_West;
    /// <summary>
    /// Provides access to input actions defined in input action map "Buttons".
    /// </summary>
    public struct ButtonsActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ButtonsActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Dpad".
        /// </summary>
        public InputAction @Dpad => m_Wrapper.m_Buttons_Dpad;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Home".
        /// </summary>
        public InputAction @Home => m_Wrapper.m_Buttons_Home;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/East".
        /// </summary>
        public InputAction @East => m_Wrapper.m_Buttons_East;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/LeftBumper".
        /// </summary>
        public InputAction @LeftBumper => m_Wrapper.m_Buttons_LeftBumper;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/RightBumper".
        /// </summary>
        public InputAction @RightBumper => m_Wrapper.m_Buttons_RightBumper;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/LeftShift".
        /// </summary>
        public InputAction @LeftShift => m_Wrapper.m_Buttons_LeftShift;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/RightShift".
        /// </summary>
        public InputAction @RightShift => m_Wrapper.m_Buttons_RightShift;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/RightStick".
        /// </summary>
        public InputAction @RightStick => m_Wrapper.m_Buttons_RightStick;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/LeftStick".
        /// </summary>
        public InputAction @LeftStick => m_Wrapper.m_Buttons_LeftStick;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/LeftTurn".
        /// </summary>
        public InputAction @LeftTurn => m_Wrapper.m_Buttons_LeftTurn;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/RightTurn".
        /// </summary>
        public InputAction @RightTurn => m_Wrapper.m_Buttons_RightTurn;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Minus".
        /// </summary>
        public InputAction @Minus => m_Wrapper.m_Buttons_Minus;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/North".
        /// </summary>
        public InputAction @North => m_Wrapper.m_Buttons_North;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Options".
        /// </summary>
        public InputAction @Options => m_Wrapper.m_Buttons_Options;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Plus".
        /// </summary>
        public InputAction @Plus => m_Wrapper.m_Buttons_Plus;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Return".
        /// </summary>
        public InputAction @Return => m_Wrapper.m_Buttons_Return;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/Share".
        /// </summary>
        public InputAction @Share => m_Wrapper.m_Buttons_Share;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/South".
        /// </summary>
        public InputAction @South => m_Wrapper.m_Buttons_South;
        /// <summary>
        /// Provides access to the underlying input action "Buttons/West".
        /// </summary>
        public InputAction @West => m_Wrapper.m_Buttons_West;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Buttons; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ButtonsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ButtonsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ButtonsActions" />
        public void AddCallbacks(IButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_ButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ButtonsActionsCallbackInterfaces.Add(instance);
            @Dpad.started += instance.OnDpad;
            @Dpad.performed += instance.OnDpad;
            @Dpad.canceled += instance.OnDpad;
            @Home.started += instance.OnHome;
            @Home.performed += instance.OnHome;
            @Home.canceled += instance.OnHome;
            @East.started += instance.OnEast;
            @East.performed += instance.OnEast;
            @East.canceled += instance.OnEast;
            @LeftBumper.started += instance.OnLeftBumper;
            @LeftBumper.performed += instance.OnLeftBumper;
            @LeftBumper.canceled += instance.OnLeftBumper;
            @RightBumper.started += instance.OnRightBumper;
            @RightBumper.performed += instance.OnRightBumper;
            @RightBumper.canceled += instance.OnRightBumper;
            @LeftShift.started += instance.OnLeftShift;
            @LeftShift.performed += instance.OnLeftShift;
            @LeftShift.canceled += instance.OnLeftShift;
            @RightShift.started += instance.OnRightShift;
            @RightShift.performed += instance.OnRightShift;
            @RightShift.canceled += instance.OnRightShift;
            @RightStick.started += instance.OnRightStick;
            @RightStick.performed += instance.OnRightStick;
            @RightStick.canceled += instance.OnRightStick;
            @LeftStick.started += instance.OnLeftStick;
            @LeftStick.performed += instance.OnLeftStick;
            @LeftStick.canceled += instance.OnLeftStick;
            @LeftTurn.started += instance.OnLeftTurn;
            @LeftTurn.performed += instance.OnLeftTurn;
            @LeftTurn.canceled += instance.OnLeftTurn;
            @RightTurn.started += instance.OnRightTurn;
            @RightTurn.performed += instance.OnRightTurn;
            @RightTurn.canceled += instance.OnRightTurn;
            @Minus.started += instance.OnMinus;
            @Minus.performed += instance.OnMinus;
            @Minus.canceled += instance.OnMinus;
            @North.started += instance.OnNorth;
            @North.performed += instance.OnNorth;
            @North.canceled += instance.OnNorth;
            @Options.started += instance.OnOptions;
            @Options.performed += instance.OnOptions;
            @Options.canceled += instance.OnOptions;
            @Plus.started += instance.OnPlus;
            @Plus.performed += instance.OnPlus;
            @Plus.canceled += instance.OnPlus;
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
            @Share.started += instance.OnShare;
            @Share.performed += instance.OnShare;
            @Share.canceled += instance.OnShare;
            @South.started += instance.OnSouth;
            @South.performed += instance.OnSouth;
            @South.canceled += instance.OnSouth;
            @West.started += instance.OnWest;
            @West.performed += instance.OnWest;
            @West.canceled += instance.OnWest;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ButtonsActions" />
        private void UnregisterCallbacks(IButtonsActions instance)
        {
            @Dpad.started -= instance.OnDpad;
            @Dpad.performed -= instance.OnDpad;
            @Dpad.canceled -= instance.OnDpad;
            @Home.started -= instance.OnHome;
            @Home.performed -= instance.OnHome;
            @Home.canceled -= instance.OnHome;
            @East.started -= instance.OnEast;
            @East.performed -= instance.OnEast;
            @East.canceled -= instance.OnEast;
            @LeftBumper.started -= instance.OnLeftBumper;
            @LeftBumper.performed -= instance.OnLeftBumper;
            @LeftBumper.canceled -= instance.OnLeftBumper;
            @RightBumper.started -= instance.OnRightBumper;
            @RightBumper.performed -= instance.OnRightBumper;
            @RightBumper.canceled -= instance.OnRightBumper;
            @LeftShift.started -= instance.OnLeftShift;
            @LeftShift.performed -= instance.OnLeftShift;
            @LeftShift.canceled -= instance.OnLeftShift;
            @RightShift.started -= instance.OnRightShift;
            @RightShift.performed -= instance.OnRightShift;
            @RightShift.canceled -= instance.OnRightShift;
            @RightStick.started -= instance.OnRightStick;
            @RightStick.performed -= instance.OnRightStick;
            @RightStick.canceled -= instance.OnRightStick;
            @LeftStick.started -= instance.OnLeftStick;
            @LeftStick.performed -= instance.OnLeftStick;
            @LeftStick.canceled -= instance.OnLeftStick;
            @LeftTurn.started -= instance.OnLeftTurn;
            @LeftTurn.performed -= instance.OnLeftTurn;
            @LeftTurn.canceled -= instance.OnLeftTurn;
            @RightTurn.started -= instance.OnRightTurn;
            @RightTurn.performed -= instance.OnRightTurn;
            @RightTurn.canceled -= instance.OnRightTurn;
            @Minus.started -= instance.OnMinus;
            @Minus.performed -= instance.OnMinus;
            @Minus.canceled -= instance.OnMinus;
            @North.started -= instance.OnNorth;
            @North.performed -= instance.OnNorth;
            @North.canceled -= instance.OnNorth;
            @Options.started -= instance.OnOptions;
            @Options.performed -= instance.OnOptions;
            @Options.canceled -= instance.OnOptions;
            @Plus.started -= instance.OnPlus;
            @Plus.performed -= instance.OnPlus;
            @Plus.canceled -= instance.OnPlus;
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
            @Share.started -= instance.OnShare;
            @Share.performed -= instance.OnShare;
            @Share.canceled -= instance.OnShare;
            @South.started -= instance.OnSouth;
            @South.performed -= instance.OnSouth;
            @South.canceled -= instance.OnSouth;
            @West.started -= instance.OnWest;
            @West.performed -= instance.OnWest;
            @West.canceled -= instance.OnWest;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ButtonsActions.UnregisterCallbacks(IButtonsActions)" />.
        /// </summary>
        /// <seealso cref="ButtonsActions.UnregisterCallbacks(IButtonsActions)" />
        public void RemoveCallbacks(IButtonsActions instance)
        {
            if (m_Wrapper.m_ButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ButtonsActions.AddCallbacks(IButtonsActions)" />
        /// <seealso cref="ButtonsActions.RemoveCallbacks(IButtonsActions)" />
        /// <seealso cref="ButtonsActions.UnregisterCallbacks(IButtonsActions)" />
        public void SetCallbacks(IButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_ButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ButtonsActions" /> instance referencing this action map.
    /// </summary>
    public ButtonsActions @Buttons => new ButtonsActions(this);

    // Steering wheel
    private readonly InputActionMap m_Steeringwheel;
    private List<ISteeringwheelActions> m_SteeringwheelActionsCallbackInterfaces = new List<ISteeringwheelActions>();
    private readonly InputAction m_Steeringwheel_Steering_Steering;
    private readonly InputAction m_Steeringwheel_Steering_Stick;
    /// <summary>
    /// Provides access to input actions defined in input action map "Steering wheel".
    /// </summary>
    public struct SteeringwheelActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SteeringwheelActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Steeringwheel/Steering_Steering".
        /// </summary>
        public InputAction @Steering_Steering => m_Wrapper.m_Steeringwheel_Steering_Steering;
        /// <summary>
        /// Provides access to the underlying input action "Steeringwheel/Steering_Stick".
        /// </summary>
        public InputAction @Steering_Stick => m_Wrapper.m_Steeringwheel_Steering_Stick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Steeringwheel; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SteeringwheelActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SteeringwheelActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SteeringwheelActions" />
        public void AddCallbacks(ISteeringwheelActions instance)
        {
            if (instance == null || m_Wrapper.m_SteeringwheelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SteeringwheelActionsCallbackInterfaces.Add(instance);
            @Steering_Steering.started += instance.OnSteering_Steering;
            @Steering_Steering.performed += instance.OnSteering_Steering;
            @Steering_Steering.canceled += instance.OnSteering_Steering;
            @Steering_Stick.started += instance.OnSteering_Stick;
            @Steering_Stick.performed += instance.OnSteering_Stick;
            @Steering_Stick.canceled += instance.OnSteering_Stick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SteeringwheelActions" />
        private void UnregisterCallbacks(ISteeringwheelActions instance)
        {
            @Steering_Steering.started -= instance.OnSteering_Steering;
            @Steering_Steering.performed -= instance.OnSteering_Steering;
            @Steering_Steering.canceled -= instance.OnSteering_Steering;
            @Steering_Stick.started -= instance.OnSteering_Stick;
            @Steering_Stick.performed -= instance.OnSteering_Stick;
            @Steering_Stick.canceled -= instance.OnSteering_Stick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SteeringwheelActions.UnregisterCallbacks(ISteeringwheelActions)" />.
        /// </summary>
        /// <seealso cref="SteeringwheelActions.UnregisterCallbacks(ISteeringwheelActions)" />
        public void RemoveCallbacks(ISteeringwheelActions instance)
        {
            if (m_Wrapper.m_SteeringwheelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SteeringwheelActions.AddCallbacks(ISteeringwheelActions)" />
        /// <seealso cref="SteeringwheelActions.RemoveCallbacks(ISteeringwheelActions)" />
        /// <seealso cref="SteeringwheelActions.UnregisterCallbacks(ISteeringwheelActions)" />
        public void SetCallbacks(ISteeringwheelActions instance)
        {
            foreach (var item in m_Wrapper.m_SteeringwheelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SteeringwheelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SteeringwheelActions" /> instance referencing this action map.
    /// </summary>
    public SteeringwheelActions @Steeringwheel => new SteeringwheelActions(this);

    // Pedals
    private readonly InputActionMap m_Pedals;
    private List<IPedalsActions> m_PedalsActionsCallbackInterfaces = new List<IPedalsActions>();
    private readonly InputAction m_Pedals_Throttle;
    private readonly InputAction m_Pedals_Clutch;
    private readonly InputAction m_Pedals_Brake;
    /// <summary>
    /// Provides access to input actions defined in input action map "Pedals".
    /// </summary>
    public struct PedalsActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PedalsActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Pedals/Throttle".
        /// </summary>
        public InputAction @Throttle => m_Wrapper.m_Pedals_Throttle;
        /// <summary>
        /// Provides access to the underlying input action "Pedals/Clutch".
        /// </summary>
        public InputAction @Clutch => m_Wrapper.m_Pedals_Clutch;
        /// <summary>
        /// Provides access to the underlying input action "Pedals/Brake".
        /// </summary>
        public InputAction @Brake => m_Wrapper.m_Pedals_Brake;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Pedals; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PedalsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PedalsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PedalsActions" />
        public void AddCallbacks(IPedalsActions instance)
        {
            if (instance == null || m_Wrapper.m_PedalsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PedalsActionsCallbackInterfaces.Add(instance);
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Clutch.started += instance.OnClutch;
            @Clutch.performed += instance.OnClutch;
            @Clutch.canceled += instance.OnClutch;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PedalsActions" />
        private void UnregisterCallbacks(IPedalsActions instance)
        {
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Clutch.started -= instance.OnClutch;
            @Clutch.performed -= instance.OnClutch;
            @Clutch.canceled -= instance.OnClutch;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PedalsActions.UnregisterCallbacks(IPedalsActions)" />.
        /// </summary>
        /// <seealso cref="PedalsActions.UnregisterCallbacks(IPedalsActions)" />
        public void RemoveCallbacks(IPedalsActions instance)
        {
            if (m_Wrapper.m_PedalsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PedalsActions.AddCallbacks(IPedalsActions)" />
        /// <seealso cref="PedalsActions.RemoveCallbacks(IPedalsActions)" />
        /// <seealso cref="PedalsActions.UnregisterCallbacks(IPedalsActions)" />
        public void SetCallbacks(IPedalsActions instance)
        {
            foreach (var item in m_Wrapper.m_PedalsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PedalsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PedalsActions" /> instance referencing this action map.
    /// </summary>
    public PedalsActions @Pedals => new PedalsActions(this);

    // Transmission
    private readonly InputActionMap m_Transmission;
    private List<ITransmissionActions> m_TransmissionActionsCallbackInterfaces = new List<ITransmissionActions>();
    private readonly InputAction m_Transmission_Shifter1;
    private readonly InputAction m_Transmission_Shifter2;
    private readonly InputAction m_Transmission_Shifter3;
    private readonly InputAction m_Transmission_Shifter4;
    private readonly InputAction m_Transmission_Shifter5;
    private readonly InputAction m_Transmission_Shifter6;
    private readonly InputAction m_Transmission_Shifter7;
    /// <summary>
    /// Provides access to input actions defined in input action map "Transmission".
    /// </summary>
    public struct TransmissionActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TransmissionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter1".
        /// </summary>
        public InputAction @Shifter1 => m_Wrapper.m_Transmission_Shifter1;
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter2".
        /// </summary>
        public InputAction @Shifter2 => m_Wrapper.m_Transmission_Shifter2;
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter3".
        /// </summary>
        public InputAction @Shifter3 => m_Wrapper.m_Transmission_Shifter3;
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter4".
        /// </summary>
        public InputAction @Shifter4 => m_Wrapper.m_Transmission_Shifter4;
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter5".
        /// </summary>
        public InputAction @Shifter5 => m_Wrapper.m_Transmission_Shifter5;
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter6".
        /// </summary>
        public InputAction @Shifter6 => m_Wrapper.m_Transmission_Shifter6;
        /// <summary>
        /// Provides access to the underlying input action "Transmission/Shifter7".
        /// </summary>
        public InputAction @Shifter7 => m_Wrapper.m_Transmission_Shifter7;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Transmission; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TransmissionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TransmissionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TransmissionActions" />
        public void AddCallbacks(ITransmissionActions instance)
        {
            if (instance == null || m_Wrapper.m_TransmissionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TransmissionActionsCallbackInterfaces.Add(instance);
            @Shifter1.started += instance.OnShifter1;
            @Shifter1.performed += instance.OnShifter1;
            @Shifter1.canceled += instance.OnShifter1;
            @Shifter2.started += instance.OnShifter2;
            @Shifter2.performed += instance.OnShifter2;
            @Shifter2.canceled += instance.OnShifter2;
            @Shifter3.started += instance.OnShifter3;
            @Shifter3.performed += instance.OnShifter3;
            @Shifter3.canceled += instance.OnShifter3;
            @Shifter4.started += instance.OnShifter4;
            @Shifter4.performed += instance.OnShifter4;
            @Shifter4.canceled += instance.OnShifter4;
            @Shifter5.started += instance.OnShifter5;
            @Shifter5.performed += instance.OnShifter5;
            @Shifter5.canceled += instance.OnShifter5;
            @Shifter6.started += instance.OnShifter6;
            @Shifter6.performed += instance.OnShifter6;
            @Shifter6.canceled += instance.OnShifter6;
            @Shifter7.started += instance.OnShifter7;
            @Shifter7.performed += instance.OnShifter7;
            @Shifter7.canceled += instance.OnShifter7;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TransmissionActions" />
        private void UnregisterCallbacks(ITransmissionActions instance)
        {
            @Shifter1.started -= instance.OnShifter1;
            @Shifter1.performed -= instance.OnShifter1;
            @Shifter1.canceled -= instance.OnShifter1;
            @Shifter2.started -= instance.OnShifter2;
            @Shifter2.performed -= instance.OnShifter2;
            @Shifter2.canceled -= instance.OnShifter2;
            @Shifter3.started -= instance.OnShifter3;
            @Shifter3.performed -= instance.OnShifter3;
            @Shifter3.canceled -= instance.OnShifter3;
            @Shifter4.started -= instance.OnShifter4;
            @Shifter4.performed -= instance.OnShifter4;
            @Shifter4.canceled -= instance.OnShifter4;
            @Shifter5.started -= instance.OnShifter5;
            @Shifter5.performed -= instance.OnShifter5;
            @Shifter5.canceled -= instance.OnShifter5;
            @Shifter6.started -= instance.OnShifter6;
            @Shifter6.performed -= instance.OnShifter6;
            @Shifter6.canceled -= instance.OnShifter6;
            @Shifter7.started -= instance.OnShifter7;
            @Shifter7.performed -= instance.OnShifter7;
            @Shifter7.canceled -= instance.OnShifter7;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TransmissionActions.UnregisterCallbacks(ITransmissionActions)" />.
        /// </summary>
        /// <seealso cref="TransmissionActions.UnregisterCallbacks(ITransmissionActions)" />
        public void RemoveCallbacks(ITransmissionActions instance)
        {
            if (m_Wrapper.m_TransmissionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TransmissionActions.AddCallbacks(ITransmissionActions)" />
        /// <seealso cref="TransmissionActions.RemoveCallbacks(ITransmissionActions)" />
        /// <seealso cref="TransmissionActions.UnregisterCallbacks(ITransmissionActions)" />
        public void SetCallbacks(ITransmissionActions instance)
        {
            foreach (var item in m_Wrapper.m_TransmissionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TransmissionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TransmissionActions" /> instance referencing this action map.
    /// </summary>
    public TransmissionActions @Transmission => new TransmissionActions(this);

    // Handbrake
    private readonly InputActionMap m_Handbrake;
    private List<IHandbrakeActions> m_HandbrakeActionsCallbackInterfaces = new List<IHandbrakeActions>();
    private readonly InputAction m_Handbrake_Handbrake;
    /// <summary>
    /// Provides access to input actions defined in input action map "Handbrake".
    /// </summary>
    public struct HandbrakeActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public HandbrakeActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Handbrake/Handbrake".
        /// </summary>
        public InputAction @Handbrake => m_Wrapper.m_Handbrake_Handbrake;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Handbrake; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="HandbrakeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(HandbrakeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="HandbrakeActions" />
        public void AddCallbacks(IHandbrakeActions instance)
        {
            if (instance == null || m_Wrapper.m_HandbrakeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandbrakeActionsCallbackInterfaces.Add(instance);
            @Handbrake.started += instance.OnHandbrake;
            @Handbrake.performed += instance.OnHandbrake;
            @Handbrake.canceled += instance.OnHandbrake;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="HandbrakeActions" />
        private void UnregisterCallbacks(IHandbrakeActions instance)
        {
            @Handbrake.started -= instance.OnHandbrake;
            @Handbrake.performed -= instance.OnHandbrake;
            @Handbrake.canceled -= instance.OnHandbrake;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HandbrakeActions.UnregisterCallbacks(IHandbrakeActions)" />.
        /// </summary>
        /// <seealso cref="HandbrakeActions.UnregisterCallbacks(IHandbrakeActions)" />
        public void RemoveCallbacks(IHandbrakeActions instance)
        {
            if (m_Wrapper.m_HandbrakeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="HandbrakeActions.AddCallbacks(IHandbrakeActions)" />
        /// <seealso cref="HandbrakeActions.RemoveCallbacks(IHandbrakeActions)" />
        /// <seealso cref="HandbrakeActions.UnregisterCallbacks(IHandbrakeActions)" />
        public void SetCallbacks(IHandbrakeActions instance)
        {
            foreach (var item in m_Wrapper.m_HandbrakeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandbrakeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="HandbrakeActions" /> instance referencing this action map.
    /// </summary>
    public HandbrakeActions @Handbrake => new HandbrakeActions(this);
    private int m_LogitechG29SchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme LogitechG29Scheme
    {
        get
        {
            if (m_LogitechG29SchemeIndex == -1) m_LogitechG29SchemeIndex = asset.FindControlSchemeIndex("Logitech G29");
            return asset.controlSchemes[m_LogitechG29SchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Buttons" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ButtonsActions.AddCallbacks(IButtonsActions)" />
    /// <seealso cref="ButtonsActions.RemoveCallbacks(IButtonsActions)" />
    public interface IButtonsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Dpad" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDpad(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Home" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHome(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "East" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEast(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Bumper" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftBumper(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Bumper" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightBumper(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Shift" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftShift(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Shift" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightShift(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Stick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightStick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Stick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftStick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Minus" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMinus(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "North" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNorth(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Options" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOptions(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Plus" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlus(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Return" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReturn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Share" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShare(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "South" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSouth(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "West" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWest(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Steering wheel" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SteeringwheelActions.AddCallbacks(ISteeringwheelActions)" />
    /// <seealso cref="SteeringwheelActions.RemoveCallbacks(ISteeringwheelActions)" />
    public interface ISteeringwheelActions
    {
        /// <summary>
        /// Method invoked when associated input action "Steering_Steering" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSteering_Steering(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Steering_Stick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSteering_Stick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Pedals" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PedalsActions.AddCallbacks(IPedalsActions)" />
    /// <seealso cref="PedalsActions.RemoveCallbacks(IPedalsActions)" />
    public interface IPedalsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Throttle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThrottle(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Clutch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClutch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Brake" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBrake(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Transmission" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TransmissionActions.AddCallbacks(ITransmissionActions)" />
    /// <seealso cref="TransmissionActions.RemoveCallbacks(ITransmissionActions)" />
    public interface ITransmissionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Shifter 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shifter 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shifter 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shifter 4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shifter 5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter5(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shifter 6" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter6(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shifter 7" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShifter7(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Handbrake" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="HandbrakeActions.AddCallbacks(IHandbrakeActions)" />
    /// <seealso cref="HandbrakeActions.RemoveCallbacks(IHandbrakeActions)" />
    public interface IHandbrakeActions
    {
        /// <summary>
        /// Method invoked when associated input action "Handbrake" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHandbrake(InputAction.CallbackContext context);
    }
}
